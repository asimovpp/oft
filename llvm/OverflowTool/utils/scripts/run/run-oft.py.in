#!/usr/bin/env python3

from typing import List, Optional
from itertools import chain

import os
import sys
import subprocess
import click

LIB_DIR = os.getcwd() + '/lib64'
LIBPASS = 'libLLVMOverflowToolPass.so'


class DefaultOptOptions(dict):
    def __init__(self, **kwargs):
        defaults = {
            'executable': 'opt',
            'pass_name': 'missing-pass-name',
            'analysis': True,
            'printing': False,
            'debug_only_filters': []
        }
        super().__init__(defaults)
        super().update(**kwargs)


class OptRunnerMixin:
    def _construct(self, dict_instance):
        cmdline = []
        cmdline.append(dict_instance.get('executable'))
        # TODO fix access to global
        cmdline.append(f'-load-pass-plugin={LIB_DIR}/{LIBPASS}')

        invocation = 'require' if dict_instance.get('analysis') else 'pass'
        if dict_instance.get('printing'):
            invocation = 'print'
        invocation += '<' + dict_instance.get('pass_name') + '>'

        pipeline = f'--passes="{invocation}"'

        cmdline.append(pipeline)

        cmdline.extend(dict_instance.get('rest').split())

        return cmdline

    def run(self):
        print(self._construct(self.__dict__))
        return subprocess.Popen(self._construct(self.__dict__),
                                stdout=sys.stdout)


class OptRunner(OptRunnerMixin):
    def __init__(self, opts=DefaultOptOptions(), **kwargs):
        self.__dict__.update(**opts)
        self.__dict__.update(**kwargs)


# TODO see https://stackoverflow.com/questions/54795607/with-python-click-how-can-i-avoid-duplicating-argument-code-used-by-multiple-su?noredirect=1&lq=1

DEBUG_ARG = click.option('--debug/--no-debug', '-d', default=False)
PRINT_ARG = click.option('--print/--no-print', '-p', 'printing', default=False)


@click.group()
def annotate_group():
    """Run annotate processing"""
    pass


@annotate_group.command()
@DEBUG_ARG
@PRINT_ARG
@click.option('--config-file', '-f', 'config_files', multiple=True,
              type=click.Path(exists=True, dir_okay=False, resolve_path=True))
@click.option('--config-dir', '-d', 'config_dirs', multiple=True,
              type=click.Path(exists=True, file_okay=False, resolve_path=True))
def annotate(debug: bool, printing: bool, config_files,
             config_dirs: Optional[List[str]]):
    """Run annotate passes"""

    annotate_options = {
        'pass_name': 'oft-manual-annotation-seletion',
        'printing': printing
    }

    annotate_options.update(
        {'debug_only_filters': ['oft-manual-annotation-selection',
                                'oft-manual-annotation-selection-analysis'] if debug else []})

    files = (os.path.abspath(f) for d in config_dirs for f in os.listdir(d))
    files_options = ''
    for f in chain(files, config_files):
        files_options += f'-f {f} '

    annotate_options.update(
        {'rest':  files_options})

    opt = OptRunner(**annotate_options)
    opt.run()


@click.group()
def trace_group():
    """Run trace processing"""
    pass

# TODO add option for loops


@trace_group.command()
@DEBUG_ARG
@PRINT_ARG
def trace():
    """Run trace passes"""


CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])
CLI = click.CommandCollection(
    context_settings=CONTEXT_SETTINGS, sources=[annotate_group, trace_group])

if __name__ == '__main__':
    CLI()
