#!/usr/bin/env python3

# :vim ft:python:

import os
import sys
import subprocess
import logging
import click
from click.exceptions import BadOptionUsage
from typing import List, Dict, Optional
from itertools import chain

LIB_DIR = os.path.abspath(os.path.dirname(__file__)) + \
    '/../@CMAKE_INSTALL_LIBDIR@'

LLVMOPT_FORWARD_ARGS = click.argument(
    'llvmopt_args', nargs=-1, type=click.UNPROCESSED)


def is_llvm_assertion_mode():
    proc = subprocess.Popen(
        "llvm-config --assertion-mode", shell=True, stdout=subprocess.PIPE)
    return "on" == proc.stdout.read().lower().strip()


def handle_llvmopt_forwarded_args(llvmopt_args: List[str], subcmd_options):
    if '-S' in llvmopt_args:
        logging.debug(f'using \'ll\' suffix due to opt forwarded argument')
        subcmd_options.update({'output_fname_ext': 'll'})

    logging.debug(f'LLVM opt forwarded args: {llvmopt_args}')
    subcmd_options.get('rest').extend(llvmopt_args)


class DefaultOptOptions(dict):
    def __init__(self, **kwargs):
        defaults = {
            'executable': 'opt',
            'load_dir': None,
            'pass_name': 'missing-pass-name',
            'analysis': True,
            'printing': False,
            'output_fname': None,
            'output_fname_suffix': 'out',
            'output_fname_ext': 'bc',
            'debug_only_filters': [],
            'rest': []
        }
        super().__init__(defaults)
        super().update(**kwargs)


class OptRunnerMixin:
    def _construct_output_fname(self, dict_instance: Dict, input_fname: str):
        output_fname = dict_instance.get('output_fname')
        if not output_fname:
            output_fname, _ = os.path.splitext(input_fname)
            if dict_instance.get('output_fname_suffix'):
                output_fname += '.' + \
                    dict_instance.get('output_fname_suffix', '')
            output_fname += '.' + dict_instance.get('output_fname_ext', '')

        return output_fname

    def _construct_load_line(self, dict_instance: Dict):
        lib_dir = dict_instance.get('load_dir') or LIB_DIR

        cmdline = []
        for fname in os.listdir(lib_dir):
            _, ext = os.path.splitext(fname)
            if ext in ['.so', '.so.1']:
                plugin_path = f'{lib_dir}/{fname}'
                cmdline.extend(['-load', plugin_path])
                cmdline.append(f'-load-pass-plugin={plugin_path}')

        return cmdline

    def _construct(self, dict_instance: Dict):
        cmdline = [dict_instance.get('executable')]

        cmdline.extend(self._construct_load_line(dict_instance))

        invocation = 'require' if dict_instance.get('analysis') else 'pass'
        if dict_instance.get('printing'):
            invocation = 'print'
        invocation += '<' + dict_instance.get('pass_name', '') + '>'

        cmdline.append(f'-passes={invocation}')
        cmdline.extend(dict_instance.get('rest', []))

        return cmdline

    def run(self, input_fnames):
        cmd = self._construct(self.__dict__)
        logging.debug(f'constructed cmdline: {cmd}')

        for f in input_fnames:
            inout_opts = [
                f, '-o', self._construct_output_fname(self.__dict__, f)]
            logging.debug(f'added cmdline in/out opts: {inout_opts}')
            full_cmd = cmd + inout_opts

            if logging.DEBUG >= logging.root.level:
                cmd_str = ' '.join(full_cmd)
                logging.debug(f'cmd to issue: {cmd_str}')

            yield subprocess.run(full_cmd, stdout=sys.stdout)


class OptRunner(OptRunnerMixin):
    def __init__(self, opts=DefaultOptOptions(), **kwargs):
        self.__dict__.update(**opts)
        self.__dict__.update(**kwargs)


@click.command(context_settings=dict(ignore_unknown_options=True))
@click.option('--config-file', '-f', 'config_files', multiple=True,
              type=click.Path(exists=True, dir_okay=False, resolve_path=True))
@click.option('--config-dir', '-d', 'config_dirs', multiple=True,
              type=click.Path(exists=True, file_okay=False, resolve_path=True))
@LLVMOPT_FORWARD_ARGS
@click.pass_context
def annotate(ctx, config_files: List[click.Path], config_dirs: List[str],
             llvmopt_args: List[str]):
    """Run annotate passes"""

    subcmd_options = DefaultOptOptions()
    subcmd_options.update({
        'pass_name': 'oft-manual-annotation-selection',
        'printing': ctx.obj['printing'],
        'output_file': ctx.obj['output_file'],
        'output_fname_suffix': 'annotate',
    })

    if ctx.obj['debug'] and is_llvm_assertion_mode():
        subcmd_options.get('debug_only_filters').extend(['oft-manual-annotation-selection',
                                                         'oft-manual-annotation-selection-analysis'])

    files = (os.path.join(d, f) for d in config_dirs for f in os.listdir(d))

    for f in chain(files, config_files):
        subcmd_options.get('rest').extend(['-oft-annotation-files', f])

    handle_llvmopt_forwarded_args(llvmopt_args, subcmd_options)

    opt = OptRunner(**subcmd_options)
    list(opt.run(ctx.obj['input_files']))


@click.command(context_settings=dict(ignore_unknown_options=True))
@LLVMOPT_FORWARD_ARGS
@click.pass_context
def trace(ctx, llvmopt_args: List[str]):
    """Run trace passes"""

    subcmd_options = DefaultOptOptions()
    subcmd_options.update({
        'pass_name': 'oft-scale-var-tracing',
        'printing': ctx.obj['printing'],
        'output_file': ctx.obj['output_file'],
        'output_fname_suffix': 'trace',
    })

    handle_llvmopt_forwarded_args(llvmopt_args, subcmd_options)

    opt = OptRunner(**subcmd_options)
    list(opt.run(ctx.obj['input_files']))


@click.group()
@click.option('--debug/--no-debug', '-d', default=False)
@click.option('--print/--no-print', '-p', 'printing', default=False)
@click.option('--input-file', '-i', 'input_files', required=True,
              multiple=True, type=click.Path(exists=True, dir_okay=False,
                                             resolve_path=True))
@click.option('--output-file', '-o', 'output_file', multiple=False,
              type=click.Path(exists=True, dir_okay=False, resolve_path=True))
@click.pass_context
def cli(ctx, debug: bool, printing: bool, input_files: List[str],
        output_file: Optional[str]):
    # ensure that ctx.obj exists and is a dict (in case `cli()` is called
    # by means other than the `if` block below)
    ctx.ensure_object(dict)

    if output_file and input_files and len(input_files) > 1:
        raise BadOptionUsage('output_file',
                             'Cannot use option with multiple input files')

    ctx.obj['debug'] = debug
    ctx.obj['printing'] = printing
    ctx.obj['input_files'] = input_files
    ctx.obj['output_file'] = output_file


if __name__ == '__main__':
    logging.basicConfig(level=os.environ.get("LOGLEVEL", "INFO"))
    context_settings = dict(help_option_names=['-h', '--help'])
    cli.add_command(annotate)
    cli.add_command(trace)
    cli.context_settings.update(context_settings)
    cli()
